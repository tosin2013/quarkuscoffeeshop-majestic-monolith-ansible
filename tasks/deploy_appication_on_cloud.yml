---
- name: start postgres pod
  containers.podman.podman_pod:
    name: postgresql
    state: started
    network: slirp4netns:port_handler=slirp4netns    
    ports:
      - "{{ pg_postgres_port }}:{{ pg_postgres_port }}"
  tags:
  - deploy_postgres
  - deploy

- name: start pgadmin4 pod
  containers.podman.podman_pod:
    name: pgadmin4
    state: started
    network: slirp4netns:port_handler=slirp4netns    
    ports:
      - "{{ pgadmin_listen_port }}:{{ pgadmin_listen_port }}"
  tags:
    - deploy_postgres
    - deploy

- name: start quarkuscoffeeshop-majestic-monolith pod
  containers.podman.podman_pod:
    name: quarkuscoffeeshop-majestic-monolith
    state: started
    network: slirp4netns:port_handler=slirp4netns    
    ports:
      - "{{ expose_port }}:{{ expose_port }}"
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy

- name: start grafana pod
  containers.podman.podman_pod:
    name: grafana
    state: started
    network: slirp4netns:port_handler=slirp4netns    
    ports:
      - "{{ grafana_port }}:{{ grafana_port }}"
  tags:
  - deploy_grafana
  - deploy

- name: Create a directory for postgres database
  ansible.builtin.file:
    path: "{{ pg_direcoty_path }}"
    state: directory
    mode: '0755'
  become: yes
  tags:
    - deploy_postgres
    - deploy


- name: Login to registry.redhat.io
  containers.podman.podman_login:
    username: "{{ rhsm_user }}"
    password: '{{ rhsm_password }}'
    registry: registry.redhat.io
  tags:
    - deploy_postgres
    - deploy

- name: Download init-postgresql.sql
  get_url:
    url: https://raw.githubusercontent.com/jeremyrdavis/quarkuscoffeeshop-majestic-monolith/main/init-postgresql.sql
    dest: /tmp/init-postgresql.sql
  delegate_to: "{{ external_endpoint }}"

- name: Change file ownership of  init-postgresql.sql
  ansible.builtin.file:
    path: /tmp/init-postgresql.sql
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create data directory 
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/data
    state: directory
    mode: '0755'
  delegate_to: "{{ external_endpoint }}"

- name: Copy file init-postgresql.sql to data directory
  ansible.builtin.copy:
    src: /tmp/init-postgresql.sql
    dest: /home/{{ ansible_user }}/data/init-postgresql.sql
    owner: postgres
    group: postgres
    mode: '0755'
    remote_src: yes

- name: Setting permissions on data folder
  ansible.builtin.command:  setfacl -m u:26:-wx /home/{{ remote_username }}/data
  become: yes
  become_user: root
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy


- name: Run postgress container 
  containers.podman.podman_container:
    name: postgresql-1
    pod: postgresql
    image: "{{ pg_container_image }}"
    restart_policy: always
    state: started
    volume:
      - /home/{{ ansible_user }}/data:/var/lib/pgsql/data:z
    env:
      POSTGRESQL_DATABASE: "{{ pg_database_name }}"
      POSTGRESQL_USER: "{{ pg_database_user }}"
      POSTGRESQL_PASSWORD: "{{ pg_database_password }}"
      PGDATA: /data
  tags:
  - deploy_postgres
  - deploy

- name: Waiting for postgres db port to open
  wait_for:
    port: "{{ pg_postgres_port }}"
    delay: "{{ pg_startup_wait_time }}"
  tags:
  - deploy_postgres
  - deploy

- name: Loading Postgres database
  ansible.builtin.command: podman exec -i postgresql-1  /bin/bash -c "PGPASSWORD={{ pg_database_password }} psql --username {{ pg_database_user }} {{ pg_database_name }} < /var/lib/pgsql/data/init-postgresql.sql"
  become: yes
  become_user: root

- name: Run pgadmin4 container 
  containers.podman.podman_container:
    name: pgadmin4-1
    pod: pgadmin4
    image: "{{ pgadmin_container_image }}"
    restart_policy: always
    state: started
    env:
      PGADMIN_DEFAULT_EMAIL: "{{ pgadmin_default_email }}"
      PGADMIN_LISTEN_PORT: "{{ pgadmin_listen_port }}"
      PGADMIN_DEFAULT_PASSWORD: "{{ pgadmin_default_password }}"
  tags:
  - deploy_postgres
  - deploy

- name: Waiting for PGADMIN port to open
  wait_for:
    port: "{{ pgadmin_listen_port }}"
    delay: "{{ pg_startup_wait_time }}"
  tags:
  - deploy_postgres
  - deploy

- name: Run quarkuscoffeeshop-majestic-monolith container 
  containers.podman.podman_container:
    name: quarkuscoffeeshop-majestic-monolith-1
    pod: quarkuscoffeeshop-majestic-monolith
    image: "{{ container_image }}:{{ container_tag }}"
    label: "io.containers.autoupdate=image"
    restart_policy: always
    state: started
    env:
      PGSQL_URL: "{{ pgsql_url }}"
      PGSQL_USER: "{{ pgsql_user }}"
      PGSQL_PASSWORD: "{{ pgsql_password }}"
      PGSQL_URL_BARISTA: "{{ pgsql_url_barista }}"
      PGSQL_USER_BARISTA: "{{ pgsql_user_barista }}"
      PGSQL_PASSWORD_BARISTA: "{{ psql_password_barista }}"
      PGSQL_URL_KITCHEN: "{{ pgsql_url_kitchen }}"
      PGSQL_USER_KITCHEN: "{{ pgsql_user_kitchen }}"
      PGSQL_PASSWORD_KITCHEN: "{{ pgsql_password_kitchen }}"
      CORS_ORIGINS: "http://{{ external_endpoint }},http://{{ application_ip }}"
      STREAM_URL: "http://{{ external_endpoint }}:8080/dashboard/stream" 
      STORE_ID: "{{ store_id }}"
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy


- name: Waiting for quarkuscoffeeshop-majestic-monolith port to open
  wait_for:
    port: "{{ expose_port }}"
    delay: "{{ startup_wait_time }}"
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy

- name: Copying over  quarkuscoffeeshop-majestic-monolith generate service script
  template:
    src: "{{ playbook_dir }}/../templates/generate-systemd.sh.j2"
    dest:  "/tmp/generate-systemd.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: no
    mode: 0755
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy

- name: Generate  quarkuscoffeeshop-majestic-monolith systemd file and start service
  ansible.builtin.command: /tmp/generate-systemd.sh quarkuscoffeeshop-majestic-monolith
  become: yes
  become_user: "{{ remote_username }}"
  tags:
  - deploy_quarkuscoffeeshop-majestic-monolith
  - deploy

- name: Run grafana container 
  containers.podman.podman_container:
    name: grafana-1
    pod: grafana
    image: "{{ gf_container_image }}:{{ gf_container_tag }}"
    restart_policy: always
    state: started
    env:
      GF_INSTALL_PLUGINS: "{{ gf_install_plugin }}"
  tags:
  - deploy_grafana
  - deploy

- name: Waiting for grafana port to open
  wait_for:
    port: "{{ grafana_port }}"
    delay: "{{ startup_wait_time }}"
  tags:
  - deploy_grafana
  - deploy

- name: Deployment Results
  vars:
    msg: |
        *****************************************************************************************
        Open http://{{ application_ip }}:{{ pgadmin_listen_port }} in browser to access pgadmin.
        Open http://{{ external_endpoint }}:{{ expose_port }} in browser to access quarkuscoffeeshop-majestic-monolith.
        Open http://{{ external_endpoint }}:{{ grafana_port }} in browser to access Grafana.
        *****************************************************************************************
  debug:
    msg: "{{ msg.split('\n') }}"